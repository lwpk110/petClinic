plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.unbroken-dome.test-sets" version "4.0.0"
    id 'java'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.unbroken-dome.test-sets'

group = 'cn.tendata.samples'
version = '0.0.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenCentral()
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    asciidoctorExt
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "com.cosium.spring.data:spring-data-jpa-entity-graph:${springDataJpaEntityGraphVersion}"
    implementation "org.flywaydb:flyway-core"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'javax.cache:cache-api'
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.webjars:webjars-locator-core'
    implementation "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
    implementation "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
    implementation 'org.ehcache:ehcache'
    implementation 'com.h2database:h2'
    implementation 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-devtools'

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation "org.springframework:spring-test"
    testImplementation "com.jayway.jsonpath:json-path"
    testImplementation "com.jayway.jsonpath:json-path-assert"
    testImplementation "org.hsqldb:hsqldb"

    integrationTestImplementation "com.github.database-rider:rider-core:1.32.0"
    integrationTestImplementation "com.github.database-rider:rider-junit5:1.32.0"
    integrationTestImplementation "com.github.springtestdbunit:spring-test-dbunit:1.3.0"
    integrationTestImplementation "org.glassfish:javax.el:${elVersion}"
}
ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

testSets {
    integrationTest { dirName = 'integration-test' }
}

project.integrationTest {
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    useJUnitPlatform()
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
